{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Techniques for Unbalanced datasets\n",
    "(by Mario Martin)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of examples of the smaller class (class 1): 10.00%\n"
     ]
    }
   ],
   "source": [
    "#Let's generate an unbalanced dataset:\n",
    "from sklearn import datasets\n",
    "from sklearn.model_selection import train_test_split\n",
    "import numpy as np\n",
    "\n",
    "rng = np.random.RandomState(0)\n",
    "n_samples_1 = 100000\n",
    "n_samples_2 = 8000\n",
    "X = np.r_[1.5 * rng.randn(n_samples_1, 2),\n",
    "          0.5 * rng.randn(n_samples_2, 2) + [2, 2]]\n",
    "y = np.array([0] * (n_samples_1) + [1] * (n_samples_2))\n",
    "\n",
    "X, y = datasets.make_classification(n_classes=2, class_sep=0.1, weights=[0.9, 0.1],\n",
    "                           n_informative=3, n_redundant=0, flip_y=0,\n",
    "                           n_features=5, n_clusters_per_class=2,\n",
    "                           n_samples=5000, random_state=10)\n",
    "\n",
    "\n",
    "# Let's separate data for training and testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42,test_size=0.5)\n",
    "\n",
    "# Proportion of examples in the smaller class (class 1) is the following\n",
    "\n",
    "print(\"Percentage of examples of the smaller class (class 1): {0:.2f}%\".format(100*np.sum(y==1)/(np.sum(y==0)+np.sum(y==1))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Params= {'n_neighbors': 9, 'weights': 'distance'} \n",
      "Accuracy on 10-fold cross-validation= 0.9168\n",
      "Accuracy on test set: 0.8988\n"
     ]
    }
   ],
   "source": [
    "# Let's optimize k-nn for this dataset\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import classification_report\n",
    "import sklearn.model_selection as cv    # Pel Cross-validation\n",
    "import sklearn.neighbors as nb          # Per fer servir el knn\n",
    "\n",
    "# Maximizing Accuracy\n",
    "params = {'n_neighbors':list(range(1,30,2)), 'weights':('uniform','distance')}\n",
    "knc = nb.KNeighborsClassifier()\n",
    "clf = GridSearchCV(knc, param_grid=params,cv=10,n_jobs=-1)  # If cv is integer, by default is Stratifyed \n",
    "clf.fit(X_train, y_train)\n",
    "print(\"Best Params=\",clf.best_params_, \"\\nAccuracy on 10-fold cross-validation=\", clf.best_score_)\n",
    "parval=clf.best_params_\n",
    "knc = nb.KNeighborsClassifier(n_neighbors=parval['n_neighbors'],weights=parval['weights'])\n",
    "knc.fit(X_train, y_train)\n",
    "pred=knc.predict(X_test)\n",
    "\n",
    "print(\"Accuracy on test set:\",accuracy_score(y_test, pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Good accuracy, but in these cases we have to observe the confusion matrix and focus not on accuracy but on recall and precision measures of the smaller class (or the f-measure that is the geometrical combination of both).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "confusion matrix on test set:\n",
      " [[2220   10]\n",
      " [ 243   27]]\n",
      "\n",
      "                precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      1.00      0.95      2230\n",
      "           1       0.73      0.10      0.18       270\n",
      "\n",
      "    accuracy                           0.90      2500\n",
      "   macro avg       0.82      0.55      0.56      2500\n",
      "weighted avg       0.88      0.90      0.86      2500\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"confusion matrix on test set:\\n\",confusion_matrix(y_test, pred))\n",
    "print(\"\\n \",classification_report(y_test, pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Oops. f1-score of 0.18 is very low. Notice that recall for class 1 is only 0.1 (in second row of confussion matrix, we can see that we only catch 27 of 243+27 cases, that is, 0.1 of recall)... Too bad.\n",
    "\n",
    "This effect is expected In higly unbalanced datasets. In order to improve these values, there are several techniques that can be applied.\n",
    "\n",
    "\n",
    "## 1- Changing performance function\n",
    "\n",
    "When optimizing parameters, try to focus on the optimization these measures (f-score, recall or precision) instead of optimizing accuracy.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Params= {'n_neighbors': 1, 'weights': 'uniform'} \n",
      "F-score on 10-fold crossvalidation= 0.3753603804074593\n",
      "\n",
      "Confusion matrix on test set:\n",
      " [[2098  132]\n",
      " [ 176   94]]\n",
      "\n",
      "Accuracy on test set: 0.8768\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.94      0.93      2230\n",
      "           1       0.42      0.35      0.38       270\n",
      "\n",
      "    accuracy                           0.88      2500\n",
      "   macro avg       0.67      0.64      0.66      2500\n",
      "weighted avg       0.87      0.88      0.87      2500\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Let's optimize f1_score by creationg an scoring function \"f_scorer\"\n",
    "\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import fbeta_score, make_scorer\n",
    "\n",
    "# Maximizing f1_score for class 1\n",
    "f_scorer = make_scorer(f1_score,pos_label=1)\n",
    "\n",
    "params = {'n_neighbors':list(range(1,30,2)), 'weights':('uniform','distance')}\n",
    "knc = nb.KNeighborsClassifier()\n",
    "clf = GridSearchCV(knc, param_grid=params,cv=10,n_jobs=-1,scoring=f_scorer)  # If cv is integer, by default is Stratifyed \n",
    "clf.fit(X_train, y_train)\n",
    "print(\"Best Params=\",clf.best_params_, \"\\nF-score on 10-fold crossvalidation=\", clf.best_score_)\n",
    "parval=clf.best_params_\n",
    "knc = nb.KNeighborsClassifier(n_neighbors=parval['n_neighbors'],weights=parval['weights'])\n",
    "knc.fit(X_train, y_train)\n",
    "pred=knc.predict(X_test)\n",
    "print(\"\\nConfusion matrix on test set:\\n\",confusion_matrix(y_test, pred))\n",
    "print(\"\\nAccuracy on test set:\",accuracy_score(y_test, pred))\n",
    "print(classification_report(y_test, pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have f1-score for class 1 of 0.38 instead of 0.18. Nice improvement.\n",
    "\n",
    "This method can be applied when we have parameters to adjust... but no in Naive Bayes, for instance, because it has no parameters to adjust. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2- Finding good threshold function (recomended approach)\n",
    "\n",
    "When running a classifier, instead of returning hard decisions about belonging to a class or the other, return the probability of belonging to the minority class. Probabilities can be estimated for most algorithms implemented in sklearn. Once we have the probabilities we will adjust the threshold on these probabilities to decide where belongs each element. The threshold will be set so it maximizes the f-measure. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      1.00      0.95      2230\n",
      "           1       0.85      0.12      0.21       270\n",
      "\n",
      "    accuracy                           0.90      2500\n",
      "   macro avg       0.87      0.56      0.58      2500\n",
      "weighted avg       0.90      0.90      0.87      2500\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Let's try Naive Bayes on hard decisions\n",
    "\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "clf = GaussianNB()\n",
    "clf.fit(X_train, y_train)\n",
    "pred = clf.predict(X_test)\n",
    "\n",
    "print(classification_report(y_test, pred))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have an f1-score of only 0.21. Let's try to impove it by selecting a good threshold for probability values. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected threshold in 10-fold cross validation: 0.21609736390924988\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.96      0.95      2230\n",
      "           1       0.58      0.48      0.53       270\n",
      "\n",
      "    accuracy                           0.91      2500\n",
      "   macro avg       0.76      0.72      0.74      2500\n",
      "weighted avg       0.90      0.91      0.90      2500\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import StratifiedKFold\n",
    "\n",
    "def filterp(th,ProbClass1):\n",
    "    \"\"\" Given a treshold \"th\" and a set of probabilies of belonging to class 1 \"ProbClass1\", return predictions \"\"\" \n",
    "    y=np.zeros(ProbClass1.shape[0])\n",
    "    for i,v in enumerate(ProbClass1):\n",
    "        if ProbClass1[i]>th:\n",
    "            y[i]=1\n",
    "    return y  \n",
    "\n",
    "clf = GaussianNB()\n",
    "lth=[]\n",
    "\n",
    "# We do a 10 fold crossvalidation with 10 iterations\n",
    "kf = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\n",
    "for train_index, test_index in kf.split(X, y):\n",
    "    X_train2, X_test2 = X[train_index], X[test_index]\n",
    "    y_train2, y_test2 = y[train_index], y[test_index]\n",
    "\n",
    "    # Train with the training data of the iteration \n",
    "    clf.fit(X_train2, y_train2)\n",
    "    # Obtaining probablity predictions for test data of the iterarion\n",
    "    probs = clf.predict_proba(X_test2)\n",
    "    # Collect probabilities of belonging to class 1\n",
    "    ProbClass1 = probs[:,1]\n",
    "    # Sort probabilities and generate pairs (threshold, f1-for-that-threshold) \n",
    "    res = np.array([[th,f1_score(y_test2,filterp(th,ProbClass1),pos_label=1)] for th in np.sort(ProbClass1)])\n",
    "\n",
    "    # Uncomment the following lines if you want to plot at each iteration how f1-score evolves increasing the threshold \n",
    "    #plt.plot(res[:,0],res[:,1])\n",
    "    #plt.show()\n",
    "\n",
    "    # Find the threshold that has maximum value of f1-score\n",
    "    maxF = np.max(res[:,1])\n",
    "    optimal_th = res[res[:,1]==maxF,0]\n",
    "    \n",
    "    # Store the optimal threshold found for the current iteration\n",
    "    lth.append(optimal_th)\n",
    "\n",
    "# Compute the average threshold for all 10 iterations    \n",
    "thdef = np.mean(lth)\n",
    "print(\"Selected threshold in 10-fold cross validation:\", thdef)\n",
    "print()\n",
    "\n",
    "# Train a classifier with the whole training data \n",
    "clf.fit(X_train, y_train)\n",
    "# Obtain probabilities for data on test set\n",
    "probs = clf.predict_proba(X_test)\n",
    "# Generate predictions using probabilities and threshold found on 10 folds cross-validation\n",
    "pred = filterp(thdef,probs[:,1])\n",
    "# Print results with this prediction vector\n",
    "print(classification_report(y_test, pred))\n",
    "\n",
    "# Ignore warnings explaining that in some iterations f1 score is 0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We increased from an f1 of Naive Bayes of 0.21 to 0.53 by adjusting the probability threshold.\n",
    "\n",
    "The same trick can be done for any algorithm implemented in python that has method \"predict_proba\" implemented. It also can be used when the fuction you want to optimize is not f-score of one class but any other you want. the only thing you have to do is change the calls to f1_score by your function. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3- Sampling approach:\n",
    "\n",
    "a) Oversampling of the minority class, \n",
    "\n",
    "b) undersampling of the majority class and,\n",
    "\n",
    "c) artificial generation of examples for the minoiry class\n",
    "\n",
    "To do that, you have to previously keep a test set with the original proportion of data to obtain the performance measure (because them have to be computed on a dataset with the true distribution of examples on each class. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The asiest way to deal with unbalanced datasets with sampling procedures is to use the imblearn package in python\n",
    "#   http://contrib.scikit-learn.org/imbalanced-learn/stable/index.html\n",
    "# Instalation mcan be done with pip or conda (if you use conda, this is recomended). Instalation is done with one\n",
    "# of the following commands:\n",
    "#    conda install -c glemaitre imbalanced-learn\n",
    "#    pip install -U imbalanced-learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "** Results for Naive Bayes\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      1.00      0.95      2230\n",
      "           1       0.85      0.12      0.21       270\n",
      "\n",
      "    accuracy                           0.90      2500\n",
      "   macro avg       0.87      0.56      0.58      2500\n",
      "weighted avg       0.90      0.90      0.87      2500\n",
      "\n",
      "Confusion matrix on test set:\n",
      " [[2224    6]\n",
      " [ 237   33]]\n",
      "\n",
      "** Results OVERSAMPLING randomly\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.71      0.82      2230\n",
      "           1       0.27      0.89      0.41       270\n",
      "\n",
      "    accuracy                           0.73      2500\n",
      "   macro avg       0.63      0.80      0.62      2500\n",
      "weighted avg       0.90      0.73      0.78      2500\n",
      "\n",
      "Confusion matrix on test set:\n",
      " [[1585  645]\n",
      " [  31  239]]\n"
     ]
    }
   ],
   "source": [
    "# Solution doing oversampling of the smaller class\n",
    "\n",
    "from imblearn.over_sampling import RandomOverSampler\n",
    "from imblearn import pipeline as pl\n",
    "\n",
    "RANDOM_STATE=42\n",
    "\n",
    "pipeline = pl.make_pipeline(GaussianNB())\n",
    "# Train the classifier with balancing\n",
    "pipeline.fit(X_train, y_train)\n",
    "# Test the classifier and get the prediction\n",
    "y_pred_bal = pipeline.predict(X_test)\n",
    "print(\"\\n** Results for Naive Bayes\")\n",
    "print(classification_report(y_test, y_pred_bal))\n",
    "print(\"Confusion matrix on test set:\\n\",confusion_matrix(y_test, y_pred_bal))\n",
    "\n",
    "pipeline = pl.make_pipeline(RandomOverSampler(random_state=RANDOM_STATE), GaussianNB())\n",
    "# Train the classifier with balancing\n",
    "pipeline.fit(X_train, y_train)\n",
    "# Test the classifier and get the prediction\n",
    "y_pred_bal = pipeline.predict(X_test)\n",
    "print(\"\\n** Results OVERSAMPLING randomly\")\n",
    "print(classification_report(y_test, y_pred_bal))\n",
    "print(\"Confusion matrix on test set:\\n\",confusion_matrix(y_test, y_pred_bal))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Caveat: When doing k-fold cross-validation\n",
    "To find the optimal parameters for your algorithm, cross-validation has to be done realistically, that means, training has to be oversampled but test not. Notice in the following cells the differences of doing carefully cross-validation for the KNN algorithm whith oversampling.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score  \n",
    "import sklearn.neighbors as nb  \n",
    "import matplotlib.pyplot as plt        # Per mostrar plots\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "\n",
    "f_scorer = make_scorer(f1_score,pos_label=1)\n",
    "\n",
    "lr = []\n",
    "for ki in range(1,30,2):\n",
    "    cv_scores = cross_val_score(nb.KNeighborsClassifier(n_neighbors=ki), X=X_train, y=y_train, cv=10, scoring=f_scorer)\n",
    "    lr.append(np.mean(cv_scores))\n",
    "plt.plot(range(1,30,2),lr,'b',label='No weighting')\n",
    "\n",
    "lr = []\n",
    "for ki in range(1,30,2):\n",
    "    cv_scores = cross_val_score(nb.KNeighborsClassifier(n_neighbors=ki,weights='distance'), X=X_train, y=y_train, cv=10, scoring=f_scorer)\n",
    "    lr.append(np.mean(cv_scores))\n",
    "plt.plot(range(1,30,2),lr,'r',label='Weighting')\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('f1-score on class 1')\n",
    "plt.legend(loc='upper right')\n",
    "plt.grid()\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Best results are for k=1. Let's train the model on over-sampled data and apply to untouched test set and see results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.94      0.93      2230\n",
      "           1       0.42      0.35      0.38       270\n",
      "\n",
      "    accuracy                           0.88      2500\n",
      "   macro avg       0.67      0.64      0.66      2500\n",
      "weighted avg       0.87      0.88      0.87      2500\n",
      "\n",
      "Confusion matrix on test set:\n",
      " [[2098  132]\n",
      " [ 176   94]]\n"
     ]
    }
   ],
   "source": [
    "# K=1\n",
    "ros = RandomOverSampler(random_state=0)\n",
    "X_resampled, y_resampled = ros.fit_resample(X_train, y_train)\n",
    "\n",
    "clf = nb.KNeighborsClassifier(n_neighbors=1).fit(X_resampled, y_resampled)\n",
    "y_pred_bal = clf.predict(X_test)\n",
    "print(classification_report(y_test, y_pred_bal))\n",
    "print(\"Confusion matrix on test set:\\n\",confusion_matrix(y_test, y_pred_bal))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this cell we do cross-validation on oversampled training data to find best parameters (but we don't care about what happens inside each cross-validation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score  \n",
    "\n",
    "X_resampled, y_resampled = ros.fit_resample(X_train, y_train)\n",
    "\n",
    "lr = []\n",
    "for ki in range(1,30,2):\n",
    "    cv_scores = cross_val_score(nb.KNeighborsClassifier(n_neighbors=ki), X=X_resampled, y=y_resampled, cv=10, scoring=f_scorer)\n",
    "    lr.append(np.mean(cv_scores))\n",
    "plt.plot(range(1,30,2),lr,'b',label='No weighting')\n",
    "\n",
    "lr = []\n",
    "for ki in range(1,30,2):\n",
    "    cv_scores = cross_val_score(nb.KNeighborsClassifier(n_neighbors=ki,weights='distance'), X=X_resampled, y=y_resampled, cv=10, scoring=f_scorer)\n",
    "    lr.append(np.mean(cv_scores))\n",
    "    \n",
    "plt.plot(range(1,30,2),lr,'r',label='Weighting')\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend(loc='upper right')\n",
    "plt.grid()\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Best value for K=1... But don't you see something suspicious in the curve? Yes, too high! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.94      0.93      2230\n",
      "           1       0.42      0.35      0.38       270\n",
      "\n",
      "    accuracy                           0.88      2500\n",
      "   macro avg       0.67      0.64      0.66      2500\n",
      "weighted avg       0.87      0.88      0.87      2500\n",
      "\n",
      "Confusion matrix on test set:\n",
      " [[2098  132]\n",
      " [ 176   94]]\n"
     ]
    }
   ],
   "source": [
    "# K=1\n",
    "\n",
    "clf = nb.KNeighborsClassifier(n_neighbors=1).fit(X_resampled, y_resampled)\n",
    "y_pred_bal = clf.predict(X_test)\n",
    "print(classification_report(y_test, y_pred_bal))\n",
    "print(\"Confusion matrix on test set:\\n\",confusion_matrix(y_test, y_pred_bal))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ooops. Nothing changed with respect to original one. Yes, because test at each cross-validation was also OVERSAMPLED... This explains the high values of the previous figure.\n",
    "\n",
    "**Lets do things as they should be done!**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Example of function that returns K-folds OVER-sampled. Should be done the same\n",
    "def K_foldCross_val_OVER(X_train, y_train, k=10, random_seed=0):\n",
    "    \"Creation of the Oversampled k sets where training is oversampled and test not\"\n",
    "    \n",
    "    kf = StratifiedKFold(n_splits=k, random_state=random_seed, shuffle=True)\n",
    "    l_X_train=[]\n",
    "    l_y_train=[]\n",
    "    l_X_test=[]\n",
    "    l_y_test=[]\n",
    "\n",
    "    for train_index_ls, validation_index_ls in kf.split(X_train, y_train):\n",
    "        # keeping validation set apart and oversampling in each iteration using smote \n",
    "        train, validation = X_train[train_index_ls], X_train[validation_index_ls]\n",
    "        target_train, target_val = y_train[train_index_ls], y_train[validation_index_ls]\n",
    "        ros = RandomOverSampler(random_state=random_seed)  ##Thing to change!\n",
    "        X_resampled, y_resampled = ros.fit_resample(train, target_train)\n",
    "\n",
    "        l_X_train.append(X_resampled)\n",
    "        l_y_train.append(y_resampled)\n",
    "        l_X_test.append(validation)\n",
    "        l_y_test.append(target_val)  \n",
    "    \n",
    "    return l_X_train,l_y_train,l_X_test,l_y_test\n",
    "\n",
    "\n",
    "def cross_val_unb(clf,X_train, y_train, method = K_foldCross_val_OVER, score=f1_score, pos_label=1):\n",
    "    scores=[]\n",
    "    l_X_train,l_y_train,l_X_test,l_y_test = method(X_train,y_train)\n",
    "    for i in range(len(l_X_train)):\n",
    "        validation_preds =  clf.fit(l_X_train[i], l_y_train[i]).predict(l_X_test[i])\n",
    "        scores.append(score(l_y_test[i], validation_preds,pos_label=pos_label))\n",
    "    return scores\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lr = []\n",
    "for ki in range(1,30,2):\n",
    "    cv_scores = cross_val_unb(nb.KNeighborsClassifier(n_neighbors=ki), X_train, y_train, score=f1_score, pos_label=1)\n",
    "    lr.append(np.mean(cv_scores))\n",
    "plt.plot(range(1,30,2),lr,'b',label='No weighting')\n",
    "\n",
    "lr = []\n",
    "for ki in range(1,30,2):\n",
    "    cv_scores = cross_val_unb(nb.KNeighborsClassifier(n_neighbors=ki,weights='distance'), X_train, y_train, score=f1_score, pos_label=1)\n",
    "    lr.append(np.mean(cv_scores))\n",
    "    \n",
    "plt.plot(range(1,30,2),lr,'r',label='Weighting')\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('f1-score on class 1')\n",
    "plt.legend(loc='upper right')\n",
    "plt.grid()\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.89      0.91      2230\n",
      "           1       0.36      0.51      0.42       270\n",
      "\n",
      "    accuracy                           0.85      2500\n",
      "   macro avg       0.65      0.70      0.67      2500\n",
      "weighted avg       0.88      0.85      0.86      2500\n",
      "\n",
      "Confusion matrix on test set:\n",
      " [[1988  242]\n",
      " [ 132  138]]\n"
     ]
    }
   ],
   "source": [
    "# K=3\n",
    "\n",
    "ros = RandomOverSampler(random_state=0)\n",
    "X_resampled, y_resampled = ros.fit_resample(X_train, y_train)\n",
    "\n",
    "clf = nb.KNeighborsClassifier(n_neighbors=3).fit(X_resampled, y_resampled)\n",
    "y_pred_bal = clf.predict(X_test)\n",
    "print(classification_report(y_test, y_pred_bal))\n",
    "print(\"Confusion matrix on test set:\\n\",confusion_matrix(y_test, y_pred_bal))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Best results so far.\n",
    "\n",
    "### Other techniques with sampling data: Undersampling and SMOTE\n",
    "\n",
    "This is an example for Naive Bayes that does not need adjusting parameters. In case you use KNN you have to adapt the previous caveat to the technique applied."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "** Results for UNDERSAMPLING with method Random\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.71      0.83      2230\n",
      "           1       0.27      0.89      0.42       270\n",
      "\n",
      "    accuracy                           0.73      2500\n",
      "   macro avg       0.63      0.80      0.62      2500\n",
      "weighted avg       0.91      0.73      0.78      2500\n",
      "\n",
      "Confusion matrix on test set:\n",
      " [[1592  638]\n",
      " [  30  240]]\n",
      "\n",
      "** Results for UNDERSAMPLING with method Instance Hardness threshold\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.94      0.94      2230\n",
      "           1       0.52      0.49      0.50       270\n",
      "\n",
      "    accuracy                           0.90      2500\n",
      "   macro avg       0.73      0.72      0.72      2500\n",
      "weighted avg       0.89      0.90      0.89      2500\n",
      "\n",
      "Confusion matrix on test set:\n",
      " [[2107  123]\n",
      " [ 138  132]]\n",
      "\n",
      "** Results for UNDERSAMPLING with method Condensed Nearest Neighbour\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.97      0.95      2230\n",
      "           1       0.66      0.40      0.49       270\n",
      "\n",
      "    accuracy                           0.91      2500\n",
      "   macro avg       0.79      0.69      0.72      2500\n",
      "weighted avg       0.90      0.91      0.90      2500\n",
      "\n",
      "Confusion matrix on test set:\n",
      " [[2174   56]\n",
      " [ 163  107]]\n"
     ]
    }
   ],
   "source": [
    "# Solution doing undersampling of the larger class. There are several method implemented. \n",
    "# I recommend any of the following ones:\n",
    "\n",
    "from imblearn.under_sampling import RandomUnderSampler,CondensedNearestNeighbour,InstanceHardnessThreshold\n",
    "\n",
    "pipeline = pl.make_pipeline(RandomUnderSampler(random_state=RANDOM_STATE), GaussianNB())\n",
    "# Train the classifier with balancing\n",
    "pipeline.fit(X_train, y_train)\n",
    "# Test the classifier and get the prediction\n",
    "y_pred_bal = pipeline.predict(X_test)\n",
    "print(\"\\n** Results for UNDERSAMPLING with method Random\")\n",
    "print(classification_report(y_test, y_pred_bal))\n",
    "print(\"Confusion matrix on test set:\\n\",confusion_matrix(y_test, y_pred_bal))\n",
    "\n",
    "pipeline = pl.make_pipeline(InstanceHardnessThreshold(random_state=RANDOM_STATE), GaussianNB())\n",
    "# Train the classifier with balancing\n",
    "pipeline.fit(X_train, y_train)\n",
    "# Test the classifier and get the prediction\n",
    "y_pred_bal = pipeline.predict(X_test)\n",
    "print(\"\\n** Results for UNDERSAMPLING with method Instance Hardness threshold\")\n",
    "print(classification_report(y_test, y_pred_bal))\n",
    "print(\"Confusion matrix on test set:\\n\",confusion_matrix(y_test, y_pred_bal))\n",
    "    \n",
    "pipeline = pl.make_pipeline(CondensedNearestNeighbour(random_state=RANDOM_STATE), GaussianNB())\n",
    "# Train the classifier with balancing\n",
    "pipeline.fit(X_train, y_train)\n",
    "# Test the classifier and get the prediction\n",
    "y_pred_bal = pipeline.predict(X_test)\n",
    "print(\"\\n** Results for UNDERSAMPLING with method Condensed Nearest Neighbour\")\n",
    "print(classification_report(y_test, y_pred_bal))\n",
    "print(\"Confusion matrix on test set:\\n\",confusion_matrix(y_test, y_pred_bal))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.73      0.83      2230\n",
      "           1       0.27      0.83      0.41       270\n",
      "\n",
      "    accuracy                           0.74      2500\n",
      "   macro avg       0.62      0.78      0.62      2500\n",
      "weighted avg       0.90      0.74      0.79      2500\n",
      "\n",
      "\n",
      " Confusion matrix on test set:\n",
      " [[1630  600]\n",
      " [  46  224]]\n"
     ]
    }
   ],
   "source": [
    "# Solution creating artificial examples of the smaller class\n",
    "from imblearn import over_sampling as os\n",
    "\n",
    "pipeline = pl.make_pipeline(os.SMOTE(random_state=RANDOM_STATE), GaussianNB())\n",
    "\n",
    "# Train the classifier with balancing\n",
    "pipeline.fit(X_train, y_train)\n",
    "# Test the classifier and get the prediction\n",
    "y_pred_bal = pipeline.predict(X_test)\n",
    "print(classification_report(y_test, y_pred_bal))\n",
    "print(\"\\n Confusion matrix on test set:\\n\",confusion_matrix(y_test, y_pred_bal))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Final notes\n",
    "There are some algorithm, for instance SVM, where you can introduce the weigth of each class in the calssification class. See the following example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tested Cs [1.e-02 1.e-01 1.e+00 1.e+01 1.e+02]\n",
      "Best C = 10.0\n",
      "\n",
      "** Results for Plain SVM\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.99      0.95      2230\n",
      "           1       0.82      0.23      0.36       270\n",
      "\n",
      "    accuracy                           0.91      2500\n",
      "   macro avg       0.86      0.61      0.66      2500\n",
      "weighted avg       0.90      0.91      0.89      2500\n",
      "\n",
      "Confusion matrix on test set:\n",
      " [[2216   14]\n",
      " [ 208   62]]\n",
      "Best C = 100.0\n",
      "\n",
      "** Results for Plain SVM with ratio for class 1 set to 10\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.83      0.89      2230\n",
      "           1       0.33      0.67      0.44       270\n",
      "\n",
      "    accuracy                           0.82      2500\n",
      "   macro avg       0.64      0.75      0.66      2500\n",
      "weighted avg       0.89      0.82      0.84      2500\n",
      "\n",
      "Confusion matrix on test set:\n",
      " [[1861  369]\n",
      " [  90  180]]\n"
     ]
    }
   ],
   "source": [
    "## This technique gives more importance to one class than to another, so we can pay more attention to the \n",
    "## smaller class.\n",
    "\n",
    "## It can be applied to DecisionTreeClassifier, RandomForestClassifier, ExtraTreesClassifier and SVM\n",
    "## but not to NaiveBayes neither KNN where other techniques should be applied\n",
    "## This technique can be applier indirectly to AdaBoostClassifier, BaggingClassifier if the base classifiers are \n",
    "## DecisionTrees for wich we define the \"class_weight\"\n",
    "\n",
    "# Example for SVM\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import svm\n",
    "\n",
    "Cs = np.logspace(-2, 2, num=5, base=10.0)\n",
    "print(\"Tested Cs\", Cs)\n",
    "param_grid = {'C': Cs}\n",
    "\n",
    "\n",
    "# fit the model and get the separating hyperplane\n",
    "grid_search = GridSearchCV(svm.SVC(kernel='rbf'), param_grid, cv=10)\n",
    "grid_search.fit(X_train, y_train)\n",
    "parval=grid_search.best_params_\n",
    "print(\"Best C =\", parval['C'])\n",
    "clf = svm.SVC(kernel='rbf',C=parval['C'])\n",
    "clf.fit(X_train,y_train)\n",
    "pred = clf.predict(X_test)\n",
    "print(\"\\n** Results for Plain SVM\")\n",
    "print(classification_report(y_test, pred))\n",
    "print(\"Confusion matrix on test set:\\n\",confusion_matrix(y_test, pred))\n",
    " \n",
    "\n",
    "# fit the model and get the separating hyperplane using weighted classes\n",
    "grid_search = GridSearchCV(svm.SVC(kernel='rbf', class_weight={1: 10}), param_grid, cv=10)\n",
    "grid_search.fit(X_train, y_train)\n",
    "parval=grid_search.best_params_\n",
    "print(\"Best C =\", parval['C'])\n",
    "clf = svm.SVC(kernel='rbf',C=parval['C'], class_weight={1: 10})\n",
    "clf.fit(X_train,y_train)\n",
    "pred = clf.predict(X_test)\n",
    "print(\"\\n** Results for Plain SVM with ratio for class 1 set to 10\")\n",
    "print(classification_report(y_test, pred))\n",
    "print(\"Confusion matrix on test set:\\n\",confusion_matrix(y_test, pred))\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Results with SVM are not very good because we haven't adjusted the gamma parameter, only C parameter is adjusted....  but the idea is there."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
